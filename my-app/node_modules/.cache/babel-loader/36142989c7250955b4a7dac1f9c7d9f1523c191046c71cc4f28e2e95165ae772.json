{"ast":null,"code":"import axios from 'axios';\nimport Cookies from 'js-cookie';\n\n// Base API URL\naxios.defaults.baseURL = 'https://productive-you-api-d9afbaf8a80b.herokuapp.com';\naxios.defaults.headers.common['Content-Type'] = 'application/json';\naxios.defaults.withCredentials = true;\n\n// Function to get CSRF token dynamically\nconst getCSRFToken = () => Cookies.get('csrftoken');\n\n// Create axios instances\nexport const axiosReq = axios.create();\nexport const axiosRes = axios.create();\n\n// Set up request interceptor for CSRF token & Authorization header\nconst setRequestHeaders = config => {\n  const csrftoken = getCSRFToken();\n  if (csrftoken) {\n    config.headers['X-CSRFToken'] = csrftoken;\n  }\n  const accessToken = Cookies.get('accessToken');\n  if (accessToken) {\n    config.headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n  return config;\n};\naxiosReq.interceptors.request.use(setRequestHeaders, error => Promise.reject(error));\naxiosRes.interceptors.request.use(setRequestHeaders, error => Promise.reject(error));\n\n// Token Refresh Function\nexport const refreshToken = async () => {\n  try {\n    const response = await axios.post('/dj-rest-auth/token/refresh/', {}, {\n      withCredentials: true\n    });\n    const newAccessToken = response.data.access;\n    if (newAccessToken) {\n      Cookies.set('accessToken', newAccessToken, {\n        secure: true,\n        sameSite: 'None'\n      });\n    }\n    return newAccessToken;\n  } catch (err) {\n    console.error('Error refreshing token:', err);\n    throw err;\n  }\n};\naxiosReq.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const newAccessToken = await refreshToken();\n      if (newAccessToken) {\n        originalRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;\n        return axiosReq(originalRequest);\n      }\n    } catch (refreshError) {\n      console.error('Token refresh failed:', refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Function to check authenticated user\nexport const checkUser = async () => {\n  try {\n    const response = await axios.get('/dj-rest-auth/user/', {\n      withCredentials: true\n    });\n    return response.data;\n  } catch (err) {\n    console.error('Error checking user:', err);\n    throw err;\n  }\n};","map":{"version":3,"names":["axios","Cookies","defaults","baseURL","headers","common","withCredentials","getCSRFToken","get","axiosReq","create","axiosRes","setRequestHeaders","config","csrftoken","accessToken","interceptors","request","use","error","Promise","reject","refreshToken","response","post","newAccessToken","data","access","set","secure","sameSite","err","console","_error$response","originalRequest","status","_retry","refreshError","checkUser"],"sources":["/Users/leighallen/Documents/GitHub/React-ProductiveYou/my-app/src/api/axiosDefaults.js"],"sourcesContent":["import axios from 'axios';\nimport Cookies from 'js-cookie';\n\n// Base API URL\naxios.defaults.baseURL = 'https://productive-you-api-d9afbaf8a80b.herokuapp.com';\naxios.defaults.headers.common['Content-Type'] = 'application/json';\naxios.defaults.withCredentials = true;\n\n// Function to get CSRF token dynamically\nconst getCSRFToken = () => Cookies.get('csrftoken');\n\n// Create axios instances\nexport const axiosReq = axios.create();\nexport const axiosRes = axios.create();\n\n// Set up request interceptor for CSRF token & Authorization header\nconst setRequestHeaders = (config) => {\n  const csrftoken = getCSRFToken();\n  if (csrftoken) {\n    config.headers['X-CSRFToken'] = csrftoken;\n  }\n\n  const accessToken = Cookies.get('accessToken');\n  if (accessToken) {\n    config.headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n\n  return config;\n};\n\naxiosReq.interceptors.request.use(setRequestHeaders, (error) => Promise.reject(error));\naxiosRes.interceptors.request.use(setRequestHeaders, (error) => Promise.reject(error));\n\n// Token Refresh Function\nexport const refreshToken = async () => {\n  try {\n    const response = await axios.post('/dj-rest-auth/token/refresh/', {}, { withCredentials: true });\n    const newAccessToken = response.data.access;\n    \n    if (newAccessToken) {\n      Cookies.set('accessToken', newAccessToken, { secure: true, sameSite: 'None' });\n    }\n\n    return newAccessToken;\n  } catch (err) {\n    console.error('Error refreshing token:', err);\n    throw err;\n  }\n};\n\naxiosReq.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      try {\n        const newAccessToken = await refreshToken();\n        if (newAccessToken) {\n          originalRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;\n          return axiosReq(originalRequest);\n        }\n      } catch (refreshError) {\n        console.error('Token refresh failed:', refreshError);\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// Function to check authenticated user\nexport const checkUser = async () => {\n  try {\n    const response = await axios.get('/dj-rest-auth/user/', { withCredentials: true });\n    return response.data;\n  } catch (err) {\n    console.error('Error checking user:', err);\n    throw err;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}