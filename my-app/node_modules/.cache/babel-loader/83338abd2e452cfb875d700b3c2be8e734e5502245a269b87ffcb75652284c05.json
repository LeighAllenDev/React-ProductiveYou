{"ast":null,"code":"import axios from 'axios';\nimport Cookies from 'js-cookie';\n\n// Base URL\naxios.defaults.baseURL = 'https://productive-you-api-d9afbaf8a80b.herokuapp.com';\naxios.defaults.headers.common['Content-Type'] = 'application/json';\naxios.defaults.withCredentials = true;\n\n// Function to get CSRF token dynamically\nconst getCSRFToken = () => Cookies.get('csrftoken');\nexport const axiosReq = axios.create();\nexport const axiosRes = axios.create();\n\n// Ensure CSRF Token is included in every request\naxiosReq.interceptors.request.use(config => {\n  const csrftoken = getCSRFToken();\n  if (csrftoken) {\n    config.headers['X-CSRFToken'] = csrftoken;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Interceptor for refreshing tokens\naxiosReq.interceptors.response.use(response => response, async error => {\n  if (error.response && error.response.status === 401) {\n    try {\n      const refreshedToken = await refreshToken();\n      error.config.headers['Authorization'] = `Bearer ${refreshedToken.access}`;\n      return axiosReq(error.config);\n    } catch (refreshError) {\n      console.error('Error refreshing token:', refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Function to refresh authentication token\nexport const refreshToken = async () => {\n  try {\n    const response = await axios.post('/dj-rest-auth/token/refresh/', {}, {\n      withCredentials: true\n    });\n    return response.data;\n  } catch (err) {\n    console.error('Error refreshing token:', err);\n    throw err;\n  }\n};\n\n// Function to check authenticated user\nexport const checkUser = async () => {\n  try {\n    const response = await axios.get('/dj-rest-auth/user/', {\n      withCredentials: true\n    });\n    return response.data;\n  } catch (err) {\n    console.error('Error checking user:', err);\n    throw err;\n  }\n};","map":{"version":3,"names":["axios","Cookies","defaults","baseURL","headers","common","withCredentials","getCSRFToken","get","axiosReq","create","axiosRes","interceptors","request","use","config","csrftoken","error","Promise","reject","response","status","refreshedToken","refreshToken","access","refreshError","console","post","data","err","checkUser"],"sources":["/Users/leighallen/Documents/GitHub/React-ProductiveYou/my-app/src/api/axiosDefaults.js"],"sourcesContent":["import axios from 'axios';\nimport Cookies from 'js-cookie';\n\n// Base URL\naxios.defaults.baseURL = 'https://productive-you-api-d9afbaf8a80b.herokuapp.com';\naxios.defaults.headers.common['Content-Type'] = 'application/json';\naxios.defaults.withCredentials = true;\n\n// Function to get CSRF token dynamically\nconst getCSRFToken = () => Cookies.get('csrftoken');\n\nexport const axiosReq = axios.create();\nexport const axiosRes = axios.create();\n\n// Ensure CSRF Token is included in every request\naxiosReq.interceptors.request.use(\n  (config) => {\n    const csrftoken = getCSRFToken();\n    if (csrftoken) {\n      config.headers['X-CSRFToken'] = csrftoken;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Interceptor for refreshing tokens\naxiosReq.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    if (error.response && error.response.status === 401) {\n      try {\n        const refreshedToken = await refreshToken();\n        error.config.headers['Authorization'] = `Bearer ${refreshedToken.access}`;\n        return axiosReq(error.config);\n      } catch (refreshError) {\n        console.error('Error refreshing token:', refreshError);\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Function to refresh authentication token\nexport const refreshToken = async () => {\n  try {\n    const response = await axios.post('/dj-rest-auth/token/refresh/', {}, { withCredentials: true });\n    return response.data;\n  } catch (err) {\n    console.error('Error refreshing token:', err);\n    throw err;\n  }\n};\n\n// Function to check authenticated user\nexport const checkUser = async () => {\n  try {\n    const response = await axios.get('/dj-rest-auth/user/', { withCredentials: true });\n    return response.data;\n  } catch (err) {\n    console.error('Error checking user:', err);\n    throw err;\n  }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,WAAW;;AAE/B;AACAD,KAAK,CAACE,QAAQ,CAACC,OAAO,GAAG,uDAAuD;AAChFH,KAAK,CAACE,QAAQ,CAACE,OAAO,CAACC,MAAM,CAAC,cAAc,CAAC,GAAG,kBAAkB;AAClEL,KAAK,CAACE,QAAQ,CAACI,eAAe,GAAG,IAAI;;AAErC;AACA,MAAMC,YAAY,GAAGA,CAAA,KAAMN,OAAO,CAACO,GAAG,CAAC,WAAW,CAAC;AAEnD,OAAO,MAAMC,QAAQ,GAAGT,KAAK,CAACU,MAAM,CAAC,CAAC;AACtC,OAAO,MAAMC,QAAQ,GAAGX,KAAK,CAACU,MAAM,CAAC,CAAC;;AAEtC;AACAD,QAAQ,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAK;EACV,MAAMC,SAAS,GAAGT,YAAY,CAAC,CAAC;EAChC,IAAIS,SAAS,EAAE;IACbD,MAAM,CAACX,OAAO,CAAC,aAAa,CAAC,GAAGY,SAAS;EAC3C;EACA,OAAOD,MAAM;AACf,CAAC,EACAE,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAR,QAAQ,CAACG,YAAY,CAACQ,QAAQ,CAACN,GAAG,CAC/BM,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EACf,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnD,IAAI;MACF,MAAMC,cAAc,GAAG,MAAMC,YAAY,CAAC,CAAC;MAC3CN,KAAK,CAACF,MAAM,CAACX,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUkB,cAAc,CAACE,MAAM,EAAE;MACzE,OAAOf,QAAQ,CAACQ,KAAK,CAACF,MAAM,CAAC;IAC/B,CAAC,CAAC,OAAOU,YAAY,EAAE;MACrBC,OAAO,CAACT,KAAK,CAAC,yBAAyB,EAAEQ,YAAY,CAAC;IACxD;EACF;EACA,OAAOP,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMM,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF,MAAMH,QAAQ,GAAG,MAAMpB,KAAK,CAAC2B,IAAI,CAAC,8BAA8B,EAAE,CAAC,CAAC,EAAE;MAAErB,eAAe,EAAE;IAAK,CAAC,CAAC;IAChG,OAAOc,QAAQ,CAACQ,IAAI;EACtB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZH,OAAO,CAACT,KAAK,CAAC,yBAAyB,EAAEY,GAAG,CAAC;IAC7C,MAAMA,GAAG;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMpB,KAAK,CAACQ,GAAG,CAAC,qBAAqB,EAAE;MAAEF,eAAe,EAAE;IAAK,CAAC,CAAC;IAClF,OAAOc,QAAQ,CAACQ,IAAI;EACtB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZH,OAAO,CAACT,KAAK,CAAC,sBAAsB,EAAEY,GAAG,CAAC;IAC1C,MAAMA,GAAG;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}