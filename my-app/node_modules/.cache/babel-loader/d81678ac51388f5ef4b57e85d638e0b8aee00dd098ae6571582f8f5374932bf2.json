{"ast":null,"code":"import axios from 'axios';\nimport Cookies from 'js-cookie';\n\n// Base URL for API\naxios.defaults.baseURL = 'https://productive-you-api-d9afbaf8a80b.herokuapp.com';\naxios.defaults.headers.common['Content-Type'] = 'application/json';\naxios.defaults.withCredentials = true;\n\n// Add CSRF token from cookies if available\nconst csrftoken = Cookies.get('csrftoken');\nif (csrftoken) {\n  axios.defaults.headers.common['X-CSRFToken'] = csrftoken;\n}\n\n// Create axios instances for requests and responses\nexport const axiosReq = axios.create({\n  baseURL: axios.defaults.baseURL,\n  withCredentials: true,\n  headers: {\n    ...axios.defaults.headers.common\n  }\n});\nexport const axiosRes = axios.create({\n  baseURL: axios.defaults.baseURL,\n  withCredentials: true,\n  headers: {\n    ...axios.defaults.headers.common\n  }\n});\n\n// Function to refresh the JWT access token\nexport const refreshToken = async () => {\n  try {\n    const response = await axiosReq.post('/dj-rest-auth/token/refresh/');\n    const {\n      access\n    } = response.data;\n\n    // Update the JWT access token in cookies\n    Cookies.set('my-app-auth', access, {\n      secure: true,\n      sameSite: 'None'\n    });\n    return access;\n  } catch (err) {\n    console.error('Error refreshing token:', err);\n    throw err;\n  }\n};\n\n// Function to check authenticated user\nexport const checkUser = async () => {\n  try {\n    const response = await axiosRes.get('/dj-rest-auth/user/');\n    return response.data;\n  } catch (err) {\n    console.error('Error checking user:', err);\n    throw err;\n  }\n};\n\n// Interceptor to add Authorization header to requests\naxiosReq.interceptors.request.use(config => {\n  const accessToken = Cookies.get('my-app-auth');\n  if (accessToken) {\n    config.headers.Authorization = `Bearer ${accessToken}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Interceptor to handle token refresh on 401 errors\naxiosReq.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  if (error.response && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const newAccessToken = await refreshToken();\n      originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n      return axiosReq(originalRequest);\n    } catch (refreshError) {\n      console.error('Token refresh failed, logging out:', refreshError);\n      // Optionally redirect to login or logout the user\n      throw refreshError;\n    }\n  }\n  return Promise.reject(error);\n});","map":{"version":3,"names":["axios","Cookies","defaults","baseURL","headers","common","withCredentials","csrftoken","get","axiosReq","create","axiosRes","refreshToken","response","post","access","data","set","secure","sameSite","err","console","error","checkUser","interceptors","request","use","config","accessToken","Authorization","Promise","reject","originalRequest","status","_retry","newAccessToken","refreshError"],"sources":["/Users/leighallen/Documents/GitHub/React-ProductiveYou/my-app/src/api/axiosDefaults.js"],"sourcesContent":["import axios from 'axios';\nimport Cookies from 'js-cookie';\n\n// Base URL for API\naxios.defaults.baseURL = 'https://productive-you-api-d9afbaf8a80b.herokuapp.com';\naxios.defaults.headers.common['Content-Type'] = 'application/json';\naxios.defaults.withCredentials = true;\n\n// Add CSRF token from cookies if available\nconst csrftoken = Cookies.get('csrftoken');\nif (csrftoken) {\n  axios.defaults.headers.common['X-CSRFToken'] = csrftoken;\n}\n\n// Create axios instances for requests and responses\nexport const axiosReq = axios.create({\n  baseURL: axios.defaults.baseURL,\n  withCredentials: true,\n  headers: {\n    ...axios.defaults.headers.common,\n  },\n});\n\nexport const axiosRes = axios.create({\n  baseURL: axios.defaults.baseURL,\n  withCredentials: true,\n  headers: {\n    ...axios.defaults.headers.common,\n  },\n});\n\n// Function to refresh the JWT access token\nexport const refreshToken = async () => {\n  try {\n    const response = await axiosReq.post('/dj-rest-auth/token/refresh/');\n    const { access } = response.data;\n\n    // Update the JWT access token in cookies\n    Cookies.set('my-app-auth', access, {\n      secure: true,\n      sameSite: 'None',\n    });\n\n    return access;\n  } catch (err) {\n    console.error('Error refreshing token:', err);\n    throw err;\n  }\n};\n\n// Function to check authenticated user\nexport const checkUser = async () => {\n  try {\n    const response = await axiosRes.get('/dj-rest-auth/user/');\n    return response.data;\n  } catch (err) {\n    console.error('Error checking user:', err);\n    throw err;\n  }\n};\n\n// Interceptor to add Authorization header to requests\naxiosReq.interceptors.request.use(\n  (config) => {\n    const accessToken = Cookies.get('my-app-auth');\n    if (accessToken) {\n      config.headers.Authorization = `Bearer ${accessToken}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Interceptor to handle token refresh on 401 errors\naxiosReq.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response && error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      try {\n        const newAccessToken = await refreshToken();\n        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n        return axiosReq(originalRequest);\n      } catch (refreshError) {\n        console.error('Token refresh failed, logging out:', refreshError);\n        // Optionally redirect to login or logout the user\n        throw refreshError;\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,WAAW;;AAE/B;AACAD,KAAK,CAACE,QAAQ,CAACC,OAAO,GAAG,uDAAuD;AAChFH,KAAK,CAACE,QAAQ,CAACE,OAAO,CAACC,MAAM,CAAC,cAAc,CAAC,GAAG,kBAAkB;AAClEL,KAAK,CAACE,QAAQ,CAACI,eAAe,GAAG,IAAI;;AAErC;AACA,MAAMC,SAAS,GAAGN,OAAO,CAACO,GAAG,CAAC,WAAW,CAAC;AAC1C,IAAID,SAAS,EAAE;EACbP,KAAK,CAACE,QAAQ,CAACE,OAAO,CAACC,MAAM,CAAC,aAAa,CAAC,GAAGE,SAAS;AAC1D;;AAEA;AACA,OAAO,MAAME,QAAQ,GAAGT,KAAK,CAACU,MAAM,CAAC;EACnCP,OAAO,EAAEH,KAAK,CAACE,QAAQ,CAACC,OAAO;EAC/BG,eAAe,EAAE,IAAI;EACrBF,OAAO,EAAE;IACP,GAAGJ,KAAK,CAACE,QAAQ,CAACE,OAAO,CAACC;EAC5B;AACF,CAAC,CAAC;AAEF,OAAO,MAAMM,QAAQ,GAAGX,KAAK,CAACU,MAAM,CAAC;EACnCP,OAAO,EAAEH,KAAK,CAACE,QAAQ,CAACC,OAAO;EAC/BG,eAAe,EAAE,IAAI;EACrBF,OAAO,EAAE;IACP,GAAGJ,KAAK,CAACE,QAAQ,CAACE,OAAO,CAACC;EAC5B;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMO,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,8BAA8B,CAAC;IACpE,MAAM;MAAEC;IAAO,CAAC,GAAGF,QAAQ,CAACG,IAAI;;IAEhC;IACAf,OAAO,CAACgB,GAAG,CAAC,aAAa,EAAEF,MAAM,EAAE;MACjCG,MAAM,EAAE,IAAI;MACZC,QAAQ,EAAE;IACZ,CAAC,CAAC;IAEF,OAAOJ,MAAM;EACf,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC;IAC7C,MAAMA,GAAG;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,SAAS,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMF,QAAQ,CAACH,GAAG,CAAC,qBAAqB,CAAC;IAC1D,OAAOK,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOI,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEF,GAAG,CAAC;IAC1C,MAAMA,GAAG;EACX;AACF,CAAC;;AAED;AACAX,QAAQ,CAACe,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAK;EACV,MAAMC,WAAW,GAAG3B,OAAO,CAACO,GAAG,CAAC,aAAa,CAAC;EAC9C,IAAIoB,WAAW,EAAE;IACfD,MAAM,CAACvB,OAAO,CAACyB,aAAa,GAAG,UAAUD,WAAW,EAAE;EACxD;EACA,OAAOD,MAAM;AACf,CAAC,EACAL,KAAK,IAAKQ,OAAO,CAACC,MAAM,CAACT,KAAK,CACjC,CAAC;;AAED;AACAb,QAAQ,CAACe,YAAY,CAACX,QAAQ,CAACa,GAAG,CAC/Bb,QAAQ,IAAKA,QAAQ,EACtB,MAAOS,KAAK,IAAK;EACf,MAAMU,eAAe,GAAGV,KAAK,CAACK,MAAM;EAEpC,IAAIL,KAAK,CAACT,QAAQ,IAAIS,KAAK,CAACT,QAAQ,CAACoB,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC9EF,eAAe,CAACE,MAAM,GAAG,IAAI;IAC7B,IAAI;MACF,MAAMC,cAAc,GAAG,MAAMvB,YAAY,CAAC,CAAC;MAC3CoB,eAAe,CAAC5B,OAAO,CAACyB,aAAa,GAAG,UAAUM,cAAc,EAAE;MAClE,OAAO1B,QAAQ,CAACuB,eAAe,CAAC;IAClC,CAAC,CAAC,OAAOI,YAAY,EAAE;MACrBf,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEc,YAAY,CAAC;MACjE;MACA,MAAMA,YAAY;IACpB;EACF;EAEA,OAAON,OAAO,CAACC,MAAM,CAACT,KAAK,CAAC;AAC9B,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}